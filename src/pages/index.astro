---
// import '@fontsource/merriweather'
import '@fontsource/source-sans-pro'
import '@fontsource/arimo'
// Note that the API has a rate limit of 15 calls per hour
const resp = await fetch("https://ll.thespacedevs.com/2.2.0/launch/a4a7fa7f-f3d9-467e-ac58-6e577155a969/", {mode: 'cors'})
const fallback_data = await resp.json()
---
<head>
    <title>Has HERON Launched Yet?</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Counting down to UTAT's first satellite launch">
    <meta name="keywords" content="HERON, satellite, launch, UTAT">
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <style>
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
            @font-face {
            font-family: 'texgyreheros';
            src: url('/fonts/texgyreheros-regular.otf');
            font-weight: normal;
            font-style: normal;
            font-display: swap;
        }
        @font-face {
            font-family: 'texgyreheros';
            src: url('/fonts/texgyreheros-bold.otf');
            font-weight: bold;
            font-style: normal;
            font-display: swap;
        }
    </style>
</head>


<body class="bg-gray-100">
    <div id="launch" class="h-screen mx-4 flex justify-center items-center text-center font-display">
        <div class="m-auto h-auto w-full">
            <h2 class="text-4xl pt-4 w-full">
                Has <span class="font-bold text-[#313151]">HERON Mk. II</span> launched yet?
            </h2>
            <div id="launchStatus" class="w-full text-[20vh] md:text-[30vh] xl:text-[40vh] md:my-8 leading-snug md:leading-tight"></div>
            <h2 id="launchCountDown" class="text-4xl md:text-6xl w-full clip"></h2>
        </div>
    </div>

    <div id="notLaunchStuff" class="mx-4 max-h-max">
        <div id="info" class="flex-auto justify-center text-center">
            <h2 class="text-4xl mb-6 font-display">About</h2>
            <div class="font-body m-auto max-w-none md:max-w-screen-md lg:max-w-screen-lg text-base">
                <p class="block">
                    HERON Mk. II (High frequency Educational Radio communications On a Nanosatellite) is an amateur radio cubesat designed by the University of Toronto Aerospace Team (UTAT).
                    Since 2017, HERON has been under development, undergoing changes in mission scope, surviving regulatory hurdles, and providing aerospace design opportunities to many University of Toronto undergrads.
                </p>
                <p class="mt-4 block">
                    In Fall 2023, HERON will hitch a ride aboard a Falcon 9 rocket on SpaceX's Transporter 9 rideshare mission to reach low-Earth orbit. 
                    Following deployment, HERON will begin regular operations for a mission lifespan of one year, providing querying capabilities in the amateur UHF band.
                    You can learn more about the HERON mission by <a class="text-blue-800 hover:text-blue-600" href="https://www.utat.ca/space-systems" target=”_blank”>visiting the UTAT website</a>. 
                </p>
            </div>
        </div>
        <div id="testimonials" class="justify-center text-center h-auto w-auto">
            <h2 class="text-4xl mt-24 mb-6 font-display">Testimonials</h2>
            <div class="flex flex-col lg:flex-row lg:flex-nowrap justify-around mb-8 mx-auto font-body max-w-none md:max-w-screen-md lg:max-w-screen-lg">
                <div class="mb-8">
                    <h3 class="text-2xl w-auto block">"Building a satellite is hard!"</h3>
                    <p class="text-base block">&mdash; Toike, 2023</p>
                </div>
                <div class="mb-8">
                    <h3 class="text-2xl block">"Nah."</h3>
                    <p class="text-base block">&mdash; Hans</p>
                </div>
                <div class="mb-8">
                    <h3 class="text-2xl auto block">"2/10, not actually a bird"</h3>
                    <p class="text-base block">&mdash; My partner, a birdwatcher</p>
                </div>
            </div>
        </div>
        <div class="text-gray-300 font-display pt-16 pb-2 text-sm justify-center text-center max-w-none md:max-w-screen-md m-auto block">
            <p>This site is not affiliated with UTAT, the University of Toronto, or Skule. It's just for fun!</p>
        </div>
    </div>
</body>
    

<script define:vars={{ fallback_data }}>
    var spacedata;
    var net;
    var intervalID;

    fetch("https://ll.thespacedevs.com/2.2.0/launch/a4a7fa7f-f3d9-467e-ac58-6e577155a969/", {mode: 'cors'})
    // For testing only
    // fetch("https://lldev.thespacedevs.com/2.2.0/launch/e521d1a4-7f67-4a13-aaaa-c8faec0e824c/", {mode: 'cors'})
    .then(res => {
        if (res.ok) {
            return res.json()
        } else {
            throw new Error('Non-successful fetch!')
        }
    })
    .then(out => parseTime(out))
    .catch(err => fallbackTime(err));


    function parseTime(out) {
        spacedata = out;
        net = new Date(spacedata.net)
        intervalID = setInterval(updateTime, 1000)
    }

    function fallbackTime(err) {
        console.log("API rate limit hit; using fallback data")
        spacedata = fallback_data

        net = new Date(spacedata.net)

        if (net instanceof Date && isFinite(net)) {
            intervalID = setInterval(updateTime, 1000)
        } else {
            console.log("Data does not exist or is invalid!")
            document.getElementById("launchStatus").innerHTML = "<span class='text-[12vh] md:text-[18vh] lg:text-[24vh] leading-loose'>MAYBE</span>";
            document.getElementById("launchCountDown").innerHTML = "<span class='text-4xl'>I can't get the launch info right now!</span>";
        }
    }

    function updateTime() {
        var curtime = new Date()
        var diff = curtime - net

        var timestring = 'L';
        if (diff < 0) {
            timestring += '<span class="text-5xl md:text-7xl">-'
        } else {
            timestring += '<span class="text-5xl md:text-7xl relative md:-top-1">+'
        }
            timestring += "</span>"

        var days = Math.floor(Math.abs(diff) / (24 * 60 * 60 * 1000))
        var hours = Math.floor(Math.abs(diff) % (24 * 60 * 60 * 1000) / 60 / 60 / 1000)
        var mins = Math.floor(Math.abs(diff) % (60 * 60 * 1000) / 60 / 1000)
        var seconds = Math.floor(Math.abs(diff) % (1000 * 60) / 1000)

        hours = (hours < 10) ? "0" + hours : hours;
        mins = (mins < 10) ? "0" + mins : mins;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        timestring += days + ":" + hours + ":" + mins + ":" + seconds


        var statusstring;
        if (curtime - net > 0) {
            statusstring = "YES"
        } else {
            statusstring = "NO"
        }

        document.getElementById("launchStatus").innerHTML = statusstring;
        document.getElementById("launchCountDown").innerHTML = timestring;
    }
</script>
